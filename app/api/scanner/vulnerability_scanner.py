"""Vulnerability scanner for SQL Injection and XSS"""

import requests
from typing import List, Dict
import time
from .config import SQL_INJECTION_PAYLOADS, XSS_PAYLOADS

class VulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'SecurityScanner/1.0 (Educational Purpose)'
        })
        self.vulnerabilities: List[Dict] = []
    
    def test_sql_injection(self, url: str, forms: List[Dict]) -> List[Dict]:
        """Test for SQL injection vulnerabilities"""
        sql_vulns = []
        
        print(f"[v0] Testing SQL Injection on {url}")
        
        for form in forms:
            if form.get('page_url') != url:
                continue
                
            for payload in SQL_INJECTION_PAYLOADS[:5]:  # Test first 5 payloads
                try:
                    # Prepare form data with payload
                    form_data = {}
                    for input_field in form['inputs']:
                        if input_field['type'] not in ['submit', 'button', 'image']:
                            form_data[input_field['name']] = payload
                    
                    # Submit form
                    if form['method'] == 'post':
                        response = self.session.post(
                            form['action'], 
                            data=form_data, 
                            timeout=5,
                            allow_redirects=False
                        )
                    else:
                        response = self.session.get(
                            form['action'], 
                            params=form_data, 
                            timeout=5,
                            allow_redirects=False
                        )
                    
                    # Check for SQL error messages
                    sql_errors = [
                        'sql syntax',
                        'mysql_fetch',
                        'mysql_num_rows',
                        'mysqli',
                        'sqlstate',
                        'postgresql',
                        'ora-',
                        'sqlite',
                        'syntax error',
                        'unclosed quotation',
                        'quoted string not properly terminated'
                    ]
                    
                    response_text = response.text.lower()
                    for error in sql_errors:
                        if error in response_text:
                            sql_vulns.append({
                                'type': 'SQL Injection',
                                'severity': 'critical',
                                'url': form['action'],
                                'method': form['method'].upper(),
                                'payload': payload,
                                'evidence': f"SQL error detected: '{error}'",
                                'form_inputs': [inp['name'] for inp in form['inputs']]
                            })
                            break
                    
                    time.sleep(0.5)  # Rate limiting
                    
                except Exception as e:
                    print(f"[v0] Error testing SQL injection: {str(e)}")
        
        return sql_vulns
    
    def test_xss(self, url: str, forms: List[Dict]) -> List[Dict]:
        """Test for XSS vulnerabilities"""
        xss_vulns = []
        
        print(f"[v0] Testing XSS on {url}")
        
        for form in forms:
            if form.get('page_url') != url:
                continue
                
            for payload in XSS_PAYLOADS[:5]:  # Test first 5 payloads
                try:
                    # Prepare form data with payload
                    form_data = {}
                    for input_field in form['inputs']:
                        if input_field['type'] not in ['submit', 'button', 'image']:
                            form_data[input_field['name']] = payload
                    
                    # Submit form
                    if form['method'] == 'post':
                        response = self.session.post(
                            form['action'], 
                            data=form_data, 
                            timeout=5
                        )
                    else:
                        response = self.session.get(
                            form['action'], 
                            params=form_data, 
                            timeout=5
                        )
                    
                    # Check if payload is reflected in response
                    if payload in response.text:
                        xss_vulns.append({
                            'type': 'Cross-Site Scripting (XSS)',
                            'severity': 'high',
                            'url': form['action'],
                            'method': form['method'].upper(),
                            'payload': payload,
                            'evidence': 'Payload reflected in response without sanitization',
                            'form_inputs': [inp['name'] for inp in form['inputs']]
                        })
                        break  # Found vulnerability, no need to test more payloads
                    
                    time.sleep(0.5)  # Rate limiting
                    
                except Exception as e:
                    print(f"[v0] Error testing XSS: {str(e)}")
        
        return xss_vulns
    
    def scan_url(self, url: str, forms: List[Dict]) -> Dict:
        """Scan a URL for vulnerabilities"""
        results = {
            'url': url,
            'sql_injection': self.test_sql_injection(url, forms),
            'xss': self.test_xss(url, forms)
        }
        return results
